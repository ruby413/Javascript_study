orm으로 개발 중 sequelize 

- 개발버전일 때 만 실행 (developement 버전 일 때 실행)
데이터를 삭제, 새로 생성
시퀄라이즈를 사용하면 깃헙 롤백할 때 스키마가 바뀐다면 간단하게 디비 롤백이 가능하다.


ORM - 구현, clean code 
	- 운영, migration

Stored procedure : db에다가 코드를 넣는것, 소스코드가 디비에 들어있음.
데이터 관련 된 것은 model 에 넣으세요.

[중첩쿼리]

관계대수 : 관계 테이블을 조작한다.
https://dev-ahn.tistory.com/68

필수적인 연산자 : 셀렉션, 프로잭션, 합집합, 차집합, 카티션 곱
-> 닫힌 연산자 : 결과값이 항상 정수에 포함된다.
- +-x
-> 닫힌 연산자이다 : 테이블과 테이블을 연산하면 테이블이 나온다.
-> 테이블의 최소한은 로우 0 이다. 
-> sql SELECT는 다섯개의 연산자에 모두 포함되어 있다.

중첩쿼리 : 값이나 테이블이 필요한 자리에 sql문이 대신 들어가는 것 
-> nested query
-> 테이블의 결과값이 테이블이기에 가능함
-> select * from user where id = (select id from user where name = ‘b’)
=> 중첩쿼리의 값이 하나인 것만 들어가는 구조. (상수. 스칼라)

Select * from user where id in (select id from user where name = ‘A’ or name =‘b’)
=> 중첩쿼리의 값이 여러개가 들어가는 구조

Select * from (select id, name from user) as ib
=> 중첩쿼리의 값이 테이블인 구조

-> 열린 연산자 : 결과값이 항상 정수에 포함되지 않는다.
- /


[쿼리최적화]


*운영체제공부*
CPU 
process : 실행중인 프로그램
c : 코드
D : 전역
H : 객체
S : (stack)지역(함수)

Program counter : 현재 실행중인 명령어, 레지스터 중 하나, 현재 실행중인 주소를 기억함.
cpu에 있는 저장장치 : 레지스터

멀티 프로세스 : cpu당 하나의 프로세스이지만, 메모리에 여러 프로세스가 있어서 스위치를 한다.
=> context switch
프로세스를 바꾸기 위해 이전 프로세스를 갈아치움. 마지막 위치와 정보를 레지스트리에 저장해둠 

멀티스레드 : 레지스트리 셋이 두개이상
코드, 전역, 객체는 공유함
지역(stack)만 분리, 나눔.

Cpu1 CPU 하나에는 프로세스가 하나, 스레드 하나만 돌아감.
그런데 어떻게 멀티스레드가 빠를 수 있을까?
A가 하드웨어 다녀오는 동안 b를 굴리는 방식으로 하면 빠름.


암달의 법칙 : 성능개선하려면 내가 가장 많이 쓰는 것을 개선해야함.
암달의 저주 

Mysql 프로파일링
-> explain 
